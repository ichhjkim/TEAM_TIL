# 좋은 객체지향 프로그램이란?
컴퓨터프로그램을 명령어의 목록으로 보는 시각에서 벗어나, 객체들의 모임으로 파악하고자 하는 것입니다.

객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용되고 있습니다.

-> 부품을 갈아끼우듯이, 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법이라고 할 수 있습니다.


## 다형성

유연하고 변경이 유연한 것이 다형성이라고 할 수 있습니다.

> 인터페이스를 구현한 객체 인스턴스를 `실행시점`에 유연하게 변경할 수 있습니다.



예를 들어, 역할과 구현으로 세상을 구현해봅시다.

운전자 역할 ===========> 자동차 역할

자동차 구현
- K3
- 아반떼
- 테슬라 모델 3

이때 운전자는 자동차를 변경해도 운전을 계속할 수 있다. 자동차 구현이 여러개더라도 자동자 역할을 한다는 점은 동일하기 때문이다.

역할과 구현으로 구분하면 세상은 단순해지고, 유연해지며 변경도 편리해집니다.

- 클라이언트는 대상 역할(interface)만 알면 됩니다.
- 클라이언트는 구현대상의 내부 구조를 몰라도 됩니다.

### 자바의 역할과 구현을 분리

자바 언어의 다형성을 활용하여
역할 = 인터페이스
구현 = 인터페이스를 구현한 클래스, 구현 객체

객체를 설계할 때 역할과 구현을 명확히 분리합니다.
객체 설계 시 역할을 먼저 부여하고, 그 역할을 수행하는 객체를 구현합니다.

### 자바 언어의 다형성
- 오버라이딩 된 메서드가 실행됩니다.
- 다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있니다.


`스프링은 다형성을 극대화하여 이용할 수 있게 도와줍니다.`

IoC, DI은 *다형성*을 활용해서 역할과 구현을 편리하게 다룰수 있도록 지원합니다.

스프링의 꽃은 다형성이라고 해도 과언이 아닙니다.

